<?xml version="1.0" encoding="UTF-8" standalone="no"?><jmeterTestPlan jmeter="3.3 r1808647" properties="3.2" version="1.2">
  <hashTree>
    <TestPlan enabled="true" guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan">
      <stringProp name="TestPlan.comments"/>
      <boolProp name="TestPlan.functional_mode">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">true</boolProp>
      <elementProp elementType="Arguments" enabled="true" guiclass="ArgumentsPanel" name="TestPlan.user_defined_variables" testclass="Arguments" testname="User Defined Variables">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"/>
    </TestPlan>
    <hashTree>
      <Arguments enabled="true" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
        <collectionProp name="Arguments.arguments">
          <elementProp elementType="Argument" name="homefilepath">
            <stringProp name="Argument.name">homefilepath</stringProp>
            <stringProp name="Argument.value">"C:/Users/mohanSrinivas/Desktop/JmeterAPISample/filePaths.json"</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <ThreadGroup enabled="true" guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Identity Token">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp elementType="LoopController" enabled="true" guiclass="LoopControlPanel" name="ThreadGroup.main_controller" testclass="LoopController" testname="Loop Controller">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1518505941000</longProp>
        <longProp name="ThreadGroup.end_time">1518505941000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"/>
        <stringProp name="ThreadGroup.delay"/>
      </ThreadGroup>
      <hashTree>
        <BeanShellPreProcessor enabled="true" guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor">
          <stringProp name="filename"/>
          <stringProp name="parameters"/>
          <boolProp name="resetInterpreter">false</boolProp>
          <stringProp name="script">import java.io.FileReader;
import net.minidev.json.JSONArray;
import net.minidev.json.JSONObject;
import net.minidev.json.parser.JSONParser;
import org.apache.jmeter.util.JMeterUtils;

///---------------**********----------------///

// Get file that contains other files file paths

JSONParser userdatareader = new JSONParser(JSONParser.MODE_JSON_SIMPLE);

JSONObject filepaths = (JSONObject) userdatareader.parse(new FileReader(${homefilepath}));


JSONObject credentials = (JSONObject) userdatareader.parse(new FileReader(filepaths.get("userCredentials")));

JSONObject server_api =  (JSONObject) userdatareader.parse(new FileReader(filepaths.get("serverapispath")));

JSONObject create_workflow = (JSONObject) userdatareader.parse(new FileReader(filepaths.get("createWorkflow")));

JSONObject update_workflow = (JSONObject) userdatareader.parse(new FileReader(filepaths.get("updatePayload")));


JMeterUtils.setProperty("apiObject",server_api.toJSONString());

JMeterUtils.setProperty("createPayload",create_workflow.toJSONString());

JMeterUtils.setProperty("updatePayload",update_workflow.toJSONString());


vars.put("value1", credentials.get("grant_type"));
vars.put("value2", credentials.get("username"));
vars.put("value3", credentials.get("password"));
vars.put("value4", credentials.get("client_id"));



</stringProp>
        </BeanShellPreProcessor>
        <hashTree/>
        <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="IDentity Server Request">
          <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments">
              <elementProp elementType="HTTPArgument" name="grant_type">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${value1}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">grant_type</stringProp>
              </elementProp>
              <elementProp elementType="HTTPArgument" name="username">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${value2}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">username</stringProp>
              </elementProp>
              <elementProp elementType="HTTPArgument" name="password">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${value3}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">password</stringProp>
              </elementProp>
              <elementProp elementType="HTTPArgument" name="client_id">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${value4}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">client_id</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">gtd-identity-dev-v1.mybluemix.net</stringProp>
          <stringProp name="HTTPSampler.port"/>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"/>
          <stringProp name="HTTPSampler.path">/identity/v0/token</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"/>
          <stringProp name="HTTPSampler.connect_timeout"/>
          <stringProp name="HTTPSampler.response_timeout"/>
        </HTTPSamplerProxy>
        <hashTree>
          <ResultCollector enabled="true" guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <sentBytes>true</sentBytes>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
                <connectTime>true</connectTime>
              </value>
            </objProp>
            <stringProp name="filename"/>
          </ResultCollector>
          <hashTree/>
          <BeanShellPostProcessor enabled="true" guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor">
            <stringProp name="filename"/>
            <stringProp name="parameters"/>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">import net.minidev.json.JSONArray;

import net.minidev.json.JSONObject;

import net.minidev.json.parser.JSONParser;


import org.apache.jmeter.util.JMeterUtils;


String response = prev.getResponseDataAsString();

JSONParser parser = new JSONParser(JSONParser.MODE_JSON_SIMPLE);

JSONObject store = (JSONObject) parser.parse(response);

String token =  store.get("id_token");

JMeterUtils.setProperty("userToken",token);</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup enabled="true" guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Work FLow ">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp elementType="LoopController" enabled="true" guiclass="LoopControlPanel" name="ThreadGroup.main_controller" testclass="LoopController" testname="Loop Controller">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1518513057000</longProp>
        <longProp name="ThreadGroup.end_time">1518513057000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"/>
        <stringProp name="ThreadGroup.delay"/>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <BeanShellPreProcessor enabled="true" guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor">
          <boolProp name="resetInterpreter">false</boolProp>
          <stringProp name="parameters"/>
          <stringProp name="filename"/>
          <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;

vars.put("token",JMeterUtils.getProperty("userToken"));

import net.minidev.json.JSONObject;

///---------------**********----------------///

// Get file that contains other files file paths

import net.minidev.json.parser.JSONParser;

JSONObject apis =(JSONObject) new JSONParser().parse(JMeterUtils.getProperty("apiObject"));

vars.put("SERVER",apis.get("SERVER"));

vars.put("PROTOCOL",apis.get("PROTOCOL"));

JSONObject api = apis.get("api");

vars.put("POST_PATH",api.get("POST"));

vars.put("GET_ALL_PATH",api.get("getAll"));</stringProp>
        </BeanShellPreProcessor>
        <hashTree/>
        <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Post A WorkfLow">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp elementType="Arguments" name="HTTPsampler.Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp elementType="HTTPArgument" name="">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${data}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${SERVER}</stringProp>
          <stringProp name="HTTPSampler.port"/>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"/>
          <stringProp name="HTTPSampler.path">${POST_PATH}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"/>
          <stringProp name="HTTPSampler.connect_timeout"/>
          <stringProp name="HTTPSampler.response_timeout"/>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellPreProcessor enabled="true" guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"/>
            <stringProp name="filename"/>
            <stringProp name="script">import net.minidev.json.JSONObject;
import net.minidev.json.parser.JSONParser;

import org.apache.jmeter.util.JMeterUtils;


JSONObject workflowpayload = (JSONObject) new JSONParser().parse(JMeterUtils.getProperty("createPayload"));

String value = workflowpayload.get("name");

int random = ${__Random(0,100000)};

JMeterUtils.setProperty("name",value+random);

JMeterUtils.setProperty("version",workflowpayload.get("version"));

workflowpayload.put("name",value+random);

String JsonBody = workflowpayload.toJSONString();

/// Set values for content-type ,data -header , type etc...

vars.put("data",JsonBody);

vars.put("Content-Type","Content-Type");

vars.put("type","application/json");
</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
            <collectionProp name="HeaderManager.headers">
              <elementProp elementType="Header" name="">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">${token}</stringProp>
              </elementProp>
              <elementProp elementType="Header" name="">
                <stringProp name="Header.name">${Content-Type}</stringProp>
                <stringProp name="Header.value">${type}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <BeanShellPostProcessor enabled="true" guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"/>
            <stringProp name="filename"/>
            <stringProp name="script">import net.minidev.json.JSONObject;
import net.minidev.json.parser.JSONParser;
import org.apache.jmeter.util.JMeterUtils;


String responses = prev.getResponseDataAsString();

JSONObject stores = (JSONObject) new JSONParser(JSONParser.MODE_JSON_SIMPLE).parse(responses);

String tokens =  stores.get("workflowId");

vars.put("userworkflowid",tokens);

JSONObject apiis =(JSONObject) new JSONParser().parse(JMeterUtils.getProperty("apiObject"));
</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <ResultCollector enabled="true" guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <sentBytes>true</sentBytes>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
                <connectTime>true</connectTime>
              </value>
            </objProp>
            <stringProp name="filename"/>
          </ResultCollector>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get all workflows">
          <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${SERVER}</stringProp>
          <stringProp name="HTTPSampler.port"/>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"/>
          <stringProp name="HTTPSampler.path">${GET_ALL_PATH}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"/>
          <stringProp name="HTTPSampler.connect_timeout"/>
          <stringProp name="HTTPSampler.response_timeout"/>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
            <collectionProp name="HeaderManager.headers">
              <elementProp elementType="Header" name="">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">${token}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get a workflow">
          <elementProp elementType="Arguments" enabled="true" guiclass="HTTPArgumentsPanel" name="HTTPsampler.Arguments" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${SERVER}</stringProp>
          <stringProp name="HTTPSampler.port"/>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"/>
          <stringProp name="HTTPSampler.path">/pe/trade/v1/workflows/${userworkflowid}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"/>
          <stringProp name="HTTPSampler.connect_timeout"/>
          <stringProp name="HTTPSampler.response_timeout"/>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
            <collectionProp name="HeaderManager.headers">
              <elementProp elementType="Header" name="">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">${token}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResultCollector enabled="true" guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <sentBytes>true</sentBytes>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
                <connectTime>true</connectTime>
              </value>
            </objProp>
            <stringProp name="filename"/>
          </ResultCollector>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Up date a  Workflow">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp elementType="Arguments" name="HTTPsampler.Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp elementType="HTTPArgument" name="">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${payload}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${SERVER}</stringProp>
          <stringProp name="HTTPSampler.port"/>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"/>
          <stringProp name="HTTPSampler.path">/pe/trade/v1/workflows/${userworkflowid}</stringProp>
          <stringProp name="HTTPSampler.method">PUT</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"/>
          <stringProp name="HTTPSampler.connect_timeout"/>
          <stringProp name="HTTPSampler.response_timeout"/>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellPreProcessor enabled="true" guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"/>
            <stringProp name="filename"/>
            <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;

import net.minidev.json.parser.JSONParser;

import net.minidev.json.JSONObject;


JSONObject payload = (JSONObject) new JSONParser().parse(JMeterUtils.getProperty("updatePayload"));


payload.put("name",JMeterUtils.getProperty("name"));

payload.put("version",JMeterUtils.getProperty("version"));

vars.put("payload",payload.toJSONString());
</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
            <collectionProp name="HeaderManager.headers">
              <elementProp elementType="Header" name="">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">${token}</stringProp>
              </elementProp>
              <elementProp elementType="Header" name="">
                <stringProp name="Header.name">${Content-Type}</stringProp>
                <stringProp name="Header.value">${type}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy enabled="true" guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Delete A workflow">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp elementType="Arguments" name="HTTPsampler.Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp elementType="HTTPArgument" name="">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value"/>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${SERVER}</stringProp>
          <stringProp name="HTTPSampler.port"/>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"/>
          <stringProp name="HTTPSampler.path">/pe/trade/v1/workflows/${userworkflowid}</stringProp>
          <stringProp name="HTTPSampler.method">DELETE</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"/>
          <stringProp name="HTTPSampler.connect_timeout"/>
          <stringProp name="HTTPSampler.response_timeout"/>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager enabled="true" guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
            <collectionProp name="HeaderManager.headers">
              <elementProp elementType="Header" name="">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">${token}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResultCollector enabled="true" guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <sentBytes>true</sentBytes>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
                <connectTime>true</connectTime>
              </value>
            </objProp>
            <stringProp name="filename"/>
          </ResultCollector>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ResultCollector enabled="true" guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"/>
      </ResultCollector>
      <hashTree/>
    </hashTree>
    <WorkBench enabled="true" guiclass="WorkBenchGui" testclass="WorkBench" testname="WorkBench">
      <boolProp name="WorkBench.save">true</boolProp>
    </WorkBench>
    <hashTree/>
  </hashTree>
</jmeterTestPlan>